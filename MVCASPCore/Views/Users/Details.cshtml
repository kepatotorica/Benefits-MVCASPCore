@model MVCASPCore.Models.Users
<head>
    <script src="jquery-3.3.1.min.js"></script>
    <script src="https://unpkg.com/react/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/prop-types/prop-types.min.js"></script>
    <script src="https://unpkg.com/recharts/umd/Recharts.min.js"></script>
</head>

@{
    ViewData["Title"] = "Benefits";
}

<h1>@ViewData["Title"]</h1>

<h4>User</h4>


<hr />


<table class="table">
    <thead>
        <tr>
            <th>
                First Name
            </th>
            <th>
                Last Name
            </th>
            <th>
                Email
            </th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                @Html.DisplayFor(model => model.FName)
            </td>
            <td>
                @Html.DisplayFor(model => model.LName)
            </td>
            <td>
                @Html.DisplayFor(model => model.Email)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@ViewData["UId"]">Edit</a> |
                <a asp-action="Delete" asp-route-id="@ViewData["UId"]">Delete</a> |
                <a asp-action="Index">Employee List</a>
            </td>
        </tr>
    </tbody>
</table>
<hr />

<div class="box">
    <div class="chart-container" style="height: 400px; width: 40%;"><div id="chartContainer2" style="position: relative"></div></div>
    <div id="container" style="margin: auto;"> </div>
</div>
<div id="chart-div" style="background-color: #222222">
    <div class="chart-container"><div id="chartContainer" style="position: relative"></div></div>
</div>




<!--list all relatives of the given user-->
<!--TODO make it so that the relatives can be added from the users details page-->
<!--TODO maybe make this it's own page? it could route back details after you click a link for siblings or something-->

<br />
<h4>Dependents</h4>
<hr />
<li><a asp-area="" asp-controller="Relatives" asp-action="Create" asp-route-id="@ViewData["UId"]">Add new</a></li>
@if (ViewData["Relatives"] != null)
{
    <table class="table" id="relatives">
        <thead>
            <tr>
                <th>
                    First Name
                </th>
                <th>
                    Last Name
                </th>
                <th>
                    Relation
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var std in ViewData["Relatives"] as IList<Relative>)
            {
                <tr>
                    <td>
                        @std.FName
                    </td>
                    <td>
                        @std.LName
                    </td>
                    <td>
                        @std.Relation
                    </td>
                    <td>
                        @*<a asp-action="Edit" asp-route-id="@ViewData["UId"]">Edit</a> |*@
                        @*<a asp-action="Delete" asp-route-id="@ViewData["UId"]">Delete</a> |*@

                        <a asp-area="" asp-controller="Relatives" asp-action="Edit" asp-route-id="@std.RelId">Edit</a> |
                        <a asp-area="" asp-controller="Relatives" asp-action="Delete" asp-route-id="@std.RelId">Delete</a>
                        @*<a asp-action="Index">Back to Employees</a>*@
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h1>No Dependents</h1>
}

@*<a asp-action="Create" class="btn btn-primary" style="float: right; position: relative; left: -.5vw;">New User</a>*@

<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>

<script>
    //for the chartJS chart
    //const data = [];
    var table = document.getElementById("relatives");
    var y  = 500.0;
    var first = "@Html.DisplayFor(model => model.FName)";
    var total = 1000.0;


    if (first.charAt(0) == "A" || first.charAt(0) == "a") {
        y = 0.9 * 500.0;
    }
    total -= y;
    if (table != null) {
        for (var i = 1, row; row = table.rows[i]; i++) {//go through all of the relatives listed in the table and add them too our dataset
            var obj = new Object();
            for (var j = 0, col; col = row.cells[j]; j++) {
                if (j == 0) {//if first name
                    first = col.innerText
                    if (first.charAt(0) == "A" || first.charAt(0) == "a") {
                        y = 0.9 * 500.0;
                        total -= y;
                    } else {
                        y = 500.0;
                        total -= y;
                    }
                }
            }
        }
    }
    const data = [];
    if (total < 0) {
        data.push({ name: 'Per Paycheck', Deductions: -1*(total / 26.0), Paycheck: 2000 + (total / 26.0), Benefits: total / 26.0 });
    } else {
        data.push({ name: 'Per Paycheck', Deductions: 0, Paycheck: 2000, Benefits: total / 26.0 });
    }

    window.onload = function () {
        var table = document.getElementById("relatives");
        var y  = 500.0;
        var first = "@Html.DisplayFor(model => model.FName)";
        var total = 1000.0;
        var payCheck = 2000.0;
        var obj = new Object(); // redeclare evertime you push it to the json object, encapsulation
        var checksPerYear = 26;

        var config = {
            animationEnabled: true,
            backgroundColor: "#212121",
            scaleFontColor: "#000000",
            title: {
                text: "Yearly @ViewData["title"]",
            },
            data: [{
                type: 'doughnut',
                startAngle: 240,
                yValueFormatString: "$0.##",
                indexLabelFontColor: "white",
                indexLabel: "{label} {y}",
                dataPoints: []
            }]
        }

        var config2 = {
            animationEnabled: true,
            backgroundColor: "#212121",
            scaleFontColor: "#000000",
            title: {
                text: "Paycheck",
             },
            data: [{
                type: 'doughnut',
                startAngle: 240,
                yValueFormatString: "$0.##",
                indexLabelFontColor: "white",
                indexLabel: "{label} {y}",
                dataPoints: []
            }]
        }

        var chart = new CanvasJS.Chart("chartContainer", config);
        var chart2 = new CanvasJS.Chart("chartContainer2", config2);

        if (first.charAt(0) == "A" || first.charAt(0) == "a" ) {
            y = 0.9 * 500.0;
        }
        obj["y"] = y
        obj["label"] = first + " (Employee)";
        total -= y;
        config.data[0].dataPoints.push(obj) //add the current user to the dataset
        if (table != null) {
            for (var i = 1, row; row = table.rows[i]; i++) {//go through all of the relatives listed in the table and add them too our dataset
                var obj = new Object();
                for (var j = 0, col; col = row.cells[j]; j++) {
                    if (j == 0) //if first name
                    {
                        first = col.innerText
                        if (first.charAt(0) == "A" || first.charAt(0) == "a") {
                            y = 0.9 * 500.0;
                            total -= y;
                        } else {
                            y = 500.0;
                            total -= y;
                        }

                        obj["y"] = y;
                        obj["label"] = col.innerText;
                        config.data[0].dataPoints.push(obj)
                        //config.data[0].dataPoints.push({ y: y, label: col.innerText)
                    }
                }
            }
        }


        var obj = new Object();
        if (total < 0) {
            total *= -1;
            total = total / checksPerYear;
            config.data[0].dataPoints.forEach(func);
            obj["y"] = payCheck - total;
            obj["label"] = "Remaining";
            config2.data[0].dataPoints.push(obj)

            var obj = new Object();
            obj["y"] = total ;
            obj["label"] = "Deducted";
            config2.data[0].dataPoints.push(obj);

        } else {
            obj["y"] = total;
            obj["label"] = "Remaining";
            config.data[0].dataPoints.push(obj)

            var obj = new Object();
            obj["y"] = payCheck;
            obj["label"] = "Remaining";
            config2.data[0].dataPoints.push(obj)
        }

        chart.render();
        chart2.render();

    }

    function func(item, index, arr) {
        var checksPerYear = 26;
        //arr[index] = item * document.getElementById("multiplyWith").value;
        //item["y"] = item["y"] / checksPerYear;
        console.log(item)
    }
</script>