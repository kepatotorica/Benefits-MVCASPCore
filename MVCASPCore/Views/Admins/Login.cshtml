@model Benefacts.Models.Admin
@using Microsoft.AspNetCore.Http;
<h2>Login</h2>

<h4>Admin</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Login" id="logForm">
            <div class="form-group">
                <label asp-for="Username" class="control-label">Username/Email</label>
                <input asp-for="Username" id="name" class="form-control" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label> <span id="caps" style="color: red; opacity: 0">Caps lock is on!</span> @*is it better practice to use display none?*@
                <input asp-for="Password" id="pass" class="form-control" type="password" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Login" class="btn btn-default" id="login" />
                <span id="p1" style="color: red; display: none">Oops! your login credentials were invalid</span>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<p id="invalid" style="display: none">@Context.Session.GetInt32("Attempts")</p>
<script>
    //this script makes it so you can only have three attempts. The problem is that you can cheese this becuase when your session is killed so are your log in attempts. I thought maybe I could use IP logging to fix this problem?

    var attempts = document.getElementById("invalid").innerText; //The session value stored in a hidden element (I know dumb, but I was having trouble accessing the sessions in the javascript)
    var fadeTarget = document.getElementById("p1"); //the element that we are going to fade out when we mess up the password
    var numAllowed = 3;//our number of attempts
    if (attempts > 0) //if we have messed up. Also note that attempts doesn't start as false since we set attempts !> 0 before the first attempt in our sessions
    {
        fadeTarget.style.display = "inline";
        var temp = numAllowed - attempts
        fadeTarget.innerText += ". " + temp + " attempts left"
        if (temp <= 0) //if we are out of attempts fade everything
        {
            document.getElementById("name").disabled = true;
            document.getElementById("pass").disabled = true;
            document.getElementById("logForm").disabled = true;
            document.getElementById("login").disabled = true;
            fadeTarget.innerText = "No more attempts";
        }

        //Fade our Failure text
        var fadeEffect = setInterval(function ()
        {
            if (!fadeTarget.style.opacity)
            {
                fadeTarget.style.opacity = 5;
            }
            if (fadeTarget.style.opacity > 0)
            {
                fadeTarget.style.opacity -= 0.05;
            }
            else
            {
                clearInterval(fadeEffect);
                //fadeTarget.style.display = "none";//this is pointless if inline, but left it here if I change my mind
            }
        }, 25);
    }

</script>

<script>
    //check if capslock is pressed
    document.addEventListener('keydown', function (event) {
        var caps = event.getModifierState && event.getModifierState('CapsLock');
        capsLabel = document.getElementById("caps");
        if (caps) {
            capsLabel.style.opacity = 1;
        } else {
            capsLabel.style.opacity = 0;
        }
    });
</script>